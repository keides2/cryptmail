# Usage: $ Python3 cryptmail-exploit.py <"uid"> <"password">
# e.g:   $ python3 cryptmail-exploit.py "xxxxx" "xxxxx"
# Required files: e-mail.json
# Execution environment: Python3 on Windows10

import sys
import requests     # pip install requests
import json
import re
import urllib3
from urllib3.exceptions import InsecureRequestWarning   # 警告抑止
urllib3.disable_warnings(InsecureRequestWarning)

# proxy 未使用
PROXY = {
  "http": "http://proxy.abcd.com:3128/",
  "https": "https://proxy.abcd.com:3128/",
}

# headers
HEADERS_INDEX = {
    'Content-Type':'application/x-www-form-urlencoded',
    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36',
    'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
    'Accept-Language':'ja,en-US;q=0.9,en;q=0.8,pt;q=0.7,zh-CN;q=0.6,zh;q=0.5',
    'Referer':'https://ees.abcd.com/index.pl',
    'Cookie':'mailaddress=FROM;LOGIN=1;USER=USERNAME;PASS=PASSWORD'
}

HEADERS_CHECK = {
    # 'Content-Type':'multipart/form-data; boundary=----WebKitFormBoundaryKVENQm3AxaUgdvMo',
    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36',
    'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
    'Accept-Language':'ja,en-US;q=0.9,en;q=0.8,pt;q=0.7,zh-CN;q=0.6,zh;q=0.5',
    'Referer':'https://ees.abcd.com/index.pl',
    'Cookie':'LOGIN=1;USER=USERNAME;PASS=PASSWORD',
}

HEADERS_SEND = {
    # 'Content-Type':'multipart/form-data; boundary=----WebKitFormBoundaryKVENQm3AxaUgdvMo',
    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36',
    'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
    'Accept-Language':'ja,en-US;q=0.9,en;q=0.8,pt;q=0.7,zh-CN;q=0.6,zh;q=0.5',
    'Referer':'https://ees.abcd.com/check.pl',
    'Cookie':'LOGIN=1;USER=USERNAME;PASS=PASSWORD',
}

HEADERS_COMPLETE = {
    'User-Agent':'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.121 Safari/537.36',
    'Accept':'text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9',
    'Accept-Language':'ja,en-US;q=0.9,en;q=0.8,pt;q=0.7,zh-CN;q=0.6,zh;q=0.5',
    'Referer':'https://ees.abcd.com/send.pl',
    'Cookie':'LOGIN=1;USER=USERNAME;PASS=PASSWORD',
}

# URLの設定
URL_EES = "https://ees.abcd.com/"
URL_INDEX = "https://ees.abcd.com/index.pl"
URL_CHECK = "https://ees.abcd.com/check.pl"
URL_SEND = "https://ees.abcd.com/send.pl"
URL_COMPLETE = "https://ees.abcd.com/complate.pl"



# 開始
def main():
    # 引数チェック
    args = sys.argv
    if (len(args) != 3):
        print("")
        print("    Usage: $ python3 " + args[0] + ' "username"' + ' "password"')
        print("")
        sys.exit(1)
    
    # ユーザー名とパスワード
    USERNAME = args[1]             # USERNAME = "kkkkkkkk"
    PASSWORD = args[2]             # PASSWORD = "xxxxxxxx"

    # ログイン情報
    LOGIN_INFO = {
        "user": USERNAME,
        "pass": PASSWORD,
        "flag": 1
    }
    
    # クッキー
    COOKIES = {
        "LOGIN": "1",
        "USER": USERNAME,
        "PASS": PASSWORD,
    }
    
    # e-mail.json リード
    with open('e-mail.json', mode="r", encoding="utf-8_sig") as f:
        try:
            df = json.load(f)
        except Exception as e:
            print("Catch the exception. Check the Json file.", e)
            sys.exit(1)

    # from
    FROM = df['from']
    # print("from: ", FROM)

    # to
    TO = df['to']
    # print("to: ", TO)

    # cc
    CC = df['cc']
    # print("cc: ", CC)

    # subject
    SUBJECT = df['subject']
    # print("subject: ", SUBJECT)
    
    # body
    BODY = df['body']
    # print("body: ", BODY)
    
    print("\n")

    # 値の一覧(values)
    # for v in df.values():
    #     print(v)

    # 値の一覧(keys -> values)
    # for key in df.keys():
    #     print(df[key])

    # ccの中身
    # print(df['cc'][0])
    # print(df['cc'][1])

    # ccの数
    # LEN = len(df['cc'])
    # print(LEN)
    
    # to リスト型 -> str型変換
    TO = ""
    TO = ','.join(df['to'])
    # print(TO)

    # cc リスト型 -> str型変換
    CC = ""
    CC = ','.join(df['cc'])
    # print(CC)

    # body リスト型 -> str型変換
    BODY = ""
    BODY = ''.join(df['body'])
    # print(BODY)

    # リスト型 -> タプル変換
    # TO = tuple(TO)
    # CC = tuple(CC)
    # BODY = tuple(BODY)

    # check.pl 送信用 files
    FILES_CHECK = {
        "from": (None, FROM),
        "to": (None, TO),
        "cc": (None, CC)
    }
    # print("files: ", FILES_CHECK)
    # print("type: ", type(FILES_CHECK))  # <class 'dict'>

    # send.pl 送信用 files
    FILES_SEND = {
        "from": (None, FROM),
        "to": (None, TO),
        "cc": (None, CC),
        "subject": (None, SUBJECT),
        "body": (None, BODY)
    }
    # print("files: ", FILES_SEND)
    # print("type: ", type(FILES_SEND))   # <class 'dict'>
    '''
    # URLオープン
    # f = urlopen(URL_EES)
    # print(f.read())
    '''
    # ログイン
    # セッション開始
    session = requests.Session()
    # print("Session headers: ", session.headers)
    '''
    # Topページ - index.pl
    res = session.get(URL_EES, headers=HEADERS_INDEX, data=LOGIN_INFO, verify=False)
    print("Session URL <Top>: ", res.url)                       # 'https://ees.abcd.com/'
    print("session status code <Top>: ", res.status_code)
    print("Session eoncoding <Top>: ", res.encoding)
    print("Session get-res.text <Top>:", res.text)
    
    # 取得したレスポンスデータをファイルに保存する - ログイン画面
    with open('login.htm', mode='w') as f:
        f.write(res.text)

    # BASIC認証なので規定のユーザー名、パスワードでログインする
    # res = session.post(URL_INDEX, headers=HEADERS, cookies=COOKIES, data=LOGIN_INFO, verify=False)
    res = session.post(URL_INDEX, headers=HEADERS_INDEX, data=LOGIN_INFO, verify=False)
    # res.raise_for_status()  # エラーの場合、例外発生
    print("Session URL <index>: ", res.url)                     # 'https://ees.abcd.com/index.pl'
    print("session status code <index>: ", res.status_code)
    print("Session eoncoding <index>: ", res.encoding)
    print("Session post-res.text <index>: ", res.text)

    # 取得したレスポンスデータをファイルに保存する - index画面
    with open('index.htm', mode='w', encoding='CP932', errors='replace') as f:
        f.write(res.text)

    # check
    try:
        res = session.post(URL_CHECK, headers=HEADERS_CHECK, cookies=COOKIES, verify=False, files=FILES_CHECK)
    except Exception as e:
            print("Catch the exception. ", e)
            sys.exit(1)

    print("Session URL <check>: ", res.url)                     # 'https://ees.abcd.com/check.pl'
    print("session status code <check>: ", res.status_code)
    print("Session eoncoding <check>: ", res.encoding)
    print("Session.post headers <check>: ", res.headers)
    print("Session.post headers Content-type <check>: ", res.headers['content-type'])
    print("Session.post response <check>: ", res.text)

    # 取得したレスポンスデータをファイルに保存する - check画面
    # : UnicodeEncodeError 'cp932' codec can't encode character '\xe5' in position 23: illegal multibyte sequence 回避
    with open('check.htm', mode='w', encoding='CP932', errors='replace') as f:
        f.write(res.text)
    '''
    # send
    res = session.post(URL_SEND, headers=HEADERS_SEND, cookies=COOKIES,  verify=False, files=FILES_SEND)
    print("Session URL <send>: ", res.url)                      # 'https://ees.abcd.com/send.pl'
    print("session status code <send>: ", res.status_code)
    '''
    print("Session eoncoding <send>: ", res.encoding)           # ISO-8859-1
    res.encoding = res.apparent_encoding                        # ↑差出人のメールアドレスが不正です の場合
    print("Session eoncoding <send>: ", res.encoding)           # utf-8
    print("Session.get response <send>:", res.text)
    '''

    # 取得したレスポンスデータをファイルに保存する - send画面
    with open('send.htm', mode='w', encoding='UTF-8', errors='replace') as f:      # utf-8_sig means UTF-8 BOM, latin-1 means iso-8859-1
        f.write(res.text)

    # res = session.post(URL_LOGIN, data=LOGIN_INFO, headers=HEADERS, cookies=COOKIES, cert=CERT, verify=False)
    # ↑SSLError
    # HTTPSConnectionPool(host='https://ees.abcd.com/index.pl', port=443): Max retries exceeded with url: /index.pl 
    # (Caused by SSLError(SSLCertVerificationError(1, '[SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed: unable to get local issuer certificate (_ssl.c:1123)')))
    # このcertオプションは、クライアント証明書を提供するために使用されます（これは、サーバーに対してクライアントを認証するために使用されますが、エラーは、クライアントがサーバーを検証していないことです）。

    # ログアウト
    res = session.get(URL_COMPLETE, headers=HEADERS_COMPLETE, data=LOGIN_INFO, verify=False)
    print("Session URL <complete>: ", res.url)                  # 'https://ees.abcd.com/complete.pl'
    print("session status code <complete>: ", res.status_code)
    '''
    print("Session eoncoding <complete>: ", res.encoding)
    print("Session.get response <complete>:", res.text)
    '''

    # 取得したレスポンスデータをファイルに保存する - complete画面
    with open('complete.htm', mode='w', encoding='CP932', errors='replace') as f:
        f.write(res.text)

    print("Done!")


if __name__ == '__main__':
    main()
    sys.exit(0)
